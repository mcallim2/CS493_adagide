/*	$Id: arg_parse.c,v 1.10 2012/05/18 11:59:26 mcallim2 Exp $	*/
/*
 *   Modifications for CS352 Begun March 31, 2012
 *   Modifications for CS352 made by Michael McAllister
 *   Last Modfied 5/18/12
 *   Current Version: Assignment 5
 *
 */
#include <stdlib.h>
#include <string.h>
#include "proto.h"

int arg_parse (char *line, char*** argvp)
{
    int read_index;     /**/
    int write_index;    /**/
    int argc;           /*number of args*/
    int len;            /*actual length of line*/
    int in_quote;       /*bool, answers "Am I in a quote?"*/
    int in_arg;         /*bool, answers "Am I in an argument?*/
    
    len=strlen(line);
    
    /* Determine the number of arguments*/
    read_index = 0;
    in_quote = 0;
    in_arg = 0;
    argc = 0;
    while (read_index < len) {
        if(!in_arg && !in_quote && (line[read_index] != ' ' && line[read_index] != '\n')){
            in_arg=!in_arg;
            argc=argc+1;
        }else if(in_arg && !in_quote && (line[read_index] == ' ' || line[read_index] == '\n')){
            in_arg=!in_arg;
        }
        if(in_arg && line[read_index] == '"'){
            in_quote=!in_quote;
        }
        read_index=read_index+1;
    }

    /* return error in case of odd number quotes*/
    if(in_quote){
        return -1;
    /* return 0 in case of zero arguments*/
    }else if(argc == 0){
        return 0;
    }else{
        /*no errors detected*/
        /*malloc the nessecary space for argv*/
        *argvp = malloc(sizeof(char*)*(argc+1));
    
        /* Set argv to point to the args */
        read_index = 0;
        write_index = 0;
        in_quote = 0;
        in_arg = 0;
        argc = 0;        
        
        while (read_index < len) {
            if(!in_arg && !in_quote && (line[read_index] != ' ' && line[read_index] != '\n')){
                in_arg=!in_arg;
                (*argvp)[argc]=&line[write_index];
                if(line[read_index] != '"'){
                    line[write_index]=line[read_index];
                    write_index=write_index+1;
                }else{
                    in_quote=!in_quote;
                }
                argc=argc+1;
            }else if(in_arg && !in_quote && (line[read_index] == ' '|| line[read_index] == '\n')){
                in_arg=!in_arg;
                line[write_index]=0;
                write_index=write_index+1;
            }else{
                if(in_arg && line[read_index] == '"'){
                    in_quote=!in_quote;
                }else{
                    line[write_index]=line[read_index];    
                    write_index=write_index+1;
                }
            }
            read_index=read_index+1;
        }
        line[write_index]=0;
        (*argvp)[argc]=NULL;
        return argc;
    }
}
